{"version":3,"sources":["../src/config/env.ts","../src/config/db.ts","../src/app.ts","../src/middleware/rateLimit.ts","../src/routes/auth.routes.ts","../src/models/User.ts","../src/services/auth.service.ts","../src/config/jwt.ts","../src/controllers/auth.controller.ts","../src/middleware/validate.ts","../src/schemas/auth.schema.ts","../src/routes/device.routes.ts","../src/models/Device.ts","../src/services/device.service.ts","../src/controllers/device.controller.ts","../src/middleware/auth.ts","../src/schemas/device.schema.ts","../src/routes/log.routes.ts","../src/models/Log.ts","../src/services/log.service.ts","../src/controllers/log.controller.ts","../src/schemas/log.schema.ts","../src/middleware/errorHandler.ts","../src/jobs/deactivateStaleDevices.ts","../src/server.ts"],"sourcesContent":["import \"dotenv/config\";\n\nexport const env = {\n  PORT: process.env.PORT ? Number(process.env.PORT) : 4000,\n  MONGO_URI: process.env.MONGO_URI || \"mongodb://localhost:27017/curvvtech\",\n  JWT_SECRET: process.env.JWT_SECRET || \"dev-secret-change-me\",\n  JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN || \"7d\",\n  RATE_LIMIT_PER_MIN: process.env.RATE_LIMIT_PER_MIN\n    ? Number(process.env.RATE_LIMIT_PER_MIN)\n    : 100,\n};\n","import mongoose from \"mongoose\";\nimport { env } from \"@config/env\";\n\nexport const connectDB = async () => {\n  await mongoose.connect(env.MONGO_URI);\n};\n","import express from \"express\";\nimport helmet from \"helmet\";\nimport cors from \"cors\";\nimport compression from \"compression\";\nimport morgan from \"morgan\";\nimport pinoHttp from \"pino-http\";\nimport { perUserRateLimiter } from \"@middleware/rateLimit.ts\";\nimport authRoutes from \"@routes/auth.routes.ts\";\nimport deviceRoutes from \"@routes/device.routes.ts\";\nimport logRoutes from \"@routes/log.routes.ts\";\nimport { errorHandler, notFound } from \"@middleware/errorHandler.ts\";\n\nconst app = express();\n\napp.use(helmet());\napp.use(cors());\napp.use(express.json({ limit: \"1mb\" }));\napp.use(compression());\napp.use(morgan(\"dev\"));\napp.use(pinoHttp());\napp.use(perUserRateLimiter);\n\napp.get(\"/health\", (_req, res) => res.json({ ok: true }));\n\napp.use(\"/auth\", authRoutes);\napp.use(\"/devices\", deviceRoutes);\napp.use(\"/devices\", logRoutes); // shares prefix\n\napp.use(notFound);\napp.use(errorHandler);\n\nexport default app;\n","import rateLimit from \"express-rate-limit\";\nimport { env } from \"@config/env.ts\";\nimport type { Request } from \"express\";\n\nexport const perUserRateLimiter = rateLimit({\n  windowMs: 60 * 1000,\n  max: env.RATE_LIMIT_PER_MIN,\n  keyGenerator: (req: Request) => {\n    const auth = req.headers.authorization;\n    const tokenPart = auth?.startsWith(\"Bearer \") ? auth.slice(7, 20) : \"anon\";\n    const ip = req.ip || \"0.0.0.0\";\n    return `${tokenPart}-${ip}`; // pseudo user-scoped limiter\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n","import { Router } from \"express\";\nimport * as AuthController from \"@controllers/auth.controller.ts\";\nimport { validate } from \"@middleware/validate.ts\";\nimport { signupSchema, loginSchema } from \"../schemas/auth.schema.ts\";\n\nconst router = Router();\n\nrouter.post(\"/signup\", validate(signupSchema), AuthController.signup);\nrouter.post(\"/login\", validate(loginSchema), AuthController.login);\n\nexport default router;\n","import { Schema, model, Document } from \"mongoose\";\n\nexport interface IUser extends Document {\n  name: string;\n  email: string;\n  password: string;\n  role: \"user\" | \"admin\";\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst userSchema = new Schema<IUser>(\n  {\n    name: { type: String, required: true, trim: true },\n    email: {\n      type: String,\n      required: true,\n      unique: true,\n      lowercase: true,\n      index: true,\n    },\n    password: { type: String, required: true },\n    role: { type: String, enum: [\"user\", \"admin\"], default: \"user\" },\n  },\n  { timestamps: true }\n);\n\nexport const User = model<IUser>(\"User\", userSchema);\n","import { User } from \"@models/User.ts\";\nimport bcrypt from \"bcryptjs\";\nimport { signJwt } from \"@config/jwt.ts\";\n\nexport async function signup(\n  name: string,\n  email: string,\n  password: string,\n  role: \"user\" | \"admin\" = \"user\"\n) {\n  const existing = await User.findOne({ email });\n  if (existing)\n    throw Object.assign(new Error(\"Email already registered\"), { status: 409 });\n  const hash = await bcrypt.hash(password, 10);\n  await User.create({ name, email, password: hash, role });\n  return { success: true, message: \"User registered successfully\" };\n}\n\nexport async function login(email: string, password: string) {\n  const user = await User.findOne({ email });\n  if (!user)\n    throw Object.assign(new Error(\"Invalid credentials\"), { status: 401 });\n  const ok = await bcrypt.compare(password, user.password);\n  if (!ok)\n    throw Object.assign(new Error(\"Invalid credentials\"), { status: 401 });\n  const token = signJwt({ sub: user.id, role: user.role });\n  return {\n    success: true,\n    token,\n    user: { id: user.id, name: user.name, email: user.email, role: user.role },\n  };\n}\n","import jwt, { Secret, SignOptions } from \"jsonwebtoken\";\nimport { env } from \"../config/env.ts\";\n\nexport interface JwtPayload {\n  sub: string; // user id\n  role: \"user\" | \"admin\";\n}\n\nexport const signJwt = (payload: JwtPayload) => {\n  const secret = (env.JWT_SECRET || \"testsecret\") as Secret;\n  const expiresIn = (env.JWT_EXPIRES_IN || \"1h\") as SignOptions[\"expiresIn\"];\n\n  return jwt.sign(payload, secret, { expiresIn });\n};\n\nexport const verifyJwt = (token: string): JwtPayload => {\n  const secret = (env.JWT_SECRET || \"testsecret\") as Secret;\n  return jwt.verify(token, secret) as JwtPayload;\n};\n","import { Request, Response } from \"express\";\nimport * as Auth from \"@services/auth.service.ts\";\nimport { StatusCodes } from \"http-status-codes\";\n\nexport async function signup(req: Request, res: Response) {\n  const { name, email, password, role } = req.body;\n  const out = await Auth.signup(name, email, password, role);\n  return res.status(StatusCodes.CREATED).json(out);\n}\n\nexport async function login(req: Request, res: Response) {\n  const { email, password } = req.body;\n  const out = await Auth.login(email, password);\n  return res.status(StatusCodes.OK).json(out);\n}\n","import { AnyZodObject, ZodError } from \"zod\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\n\nexport const validate =\n  (schema: AnyZodObject) =>\n  (req: Request, res: Response, next: NextFunction) => {\n    try {\n      schema.parse({ body: req.body, query: req.query, params: req.params });\n      return next();\n    } catch (err) {\n      const zerr = err as ZodError;\n      return res\n        .status(StatusCodes.BAD_REQUEST)\n        .json({ success: false, errors: zerr.flatten() });\n    }\n  };\n","import { z } from \"zod\";\n\nexport const signupSchema = z.object({\n  body: z.object({\n    name: z.string().min(2),\n    email: z.string().email(),\n    password: z.string().min(8),\n    role: z.enum([\"user\", \"admin\"]).optional().default(\"user\"),\n  }),\n});\n\nexport const loginSchema = z.object({\n  body: z.object({\n    email: z.string().email(),\n    password: z.string().min(8),\n  }),\n});\n","import { Router } from \"express\";\nimport * as DeviceController from \"@controllers/device.controller.ts\";\nimport { validate } from \"@middleware/validate.ts\";\nimport { auth } from \"@middleware/auth.ts\";\nimport {\n  createDeviceSchema,\n  listDevicesSchema,\n  updateDeviceSchema,\n  deviceIdParamSchema,\n  heartbeatSchema,\n} from \"../schemas/device.schema.ts\";\n\nconst router = Router();\n\nrouter.use(auth);\n\nrouter.post(\"/\", validate(createDeviceSchema), DeviceController.create);\nrouter.get(\"/\", validate(listDevicesSchema), DeviceController.list);\nrouter.patch(\"/:id\", validate(updateDeviceSchema), DeviceController.update);\nrouter.delete(\"/:id\", validate(deviceIdParamSchema), DeviceController.remove);\nrouter.post(\n  \"/:id/heartbeat\",\n  validate(heartbeatSchema),\n  DeviceController.heartbeat\n);\n\nexport default router;\n","import { Schema, model, Document, Types } from \"mongoose\";\n\nexport type DeviceStatus = \"active\" | \"inactive\" | \"faulty\";\nexport type DeviceType = \"light\" | \"thermostat\" | \"meter\" | \"camera\" | \"other\";\n\nexport interface IDevice extends Document {\n  name: string;\n  type: DeviceType;\n  status: DeviceStatus;\n  last_active_at: Date | null;\n  owner_id: Types.ObjectId;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst deviceSchema = new Schema<IDevice>(\n  {\n    name: { type: String, required: true, trim: true },\n    type: {\n      type: String,\n      enum: [\"light\", \"thermostat\", \"meter\", \"camera\", \"other\"],\n      default: \"other\",\n    },\n    status: {\n      type: String,\n      enum: [\"active\", \"inactive\", \"faulty\"],\n      default: \"inactive\",\n    },\n    last_active_at: { type: Date, default: null },\n    owner_id: {\n      type: Schema.Types.ObjectId,\n      ref: \"User\",\n      required: true,\n      index: true,\n    },\n  },\n  { timestamps: true }\n);\n\nexport const Device = model<IDevice>(\"Device\", deviceSchema);\n","import { Device, IDevice } from \"@models/Device.ts\";\nimport { FilterQuery, Types } from \"mongoose\";\n\nexport async function createDevice(\n  ownerId: string,\n  data: Pick<IDevice, \"name\" | \"type\" | \"status\">\n) {\n  const device = await Device.create({\n    ...data,\n    owner_id: new Types.ObjectId(ownerId),\n  });\n  return device;\n}\n\nexport async function listDevices(\n  ownerId: string,\n  filter: { type?: string; status?: string }\n) {\n  const q: FilterQuery<IDevice> = { owner_id: new Types.ObjectId(ownerId) };\n  if (filter.type) q.type = filter.type as any;\n  if (filter.status) q.status = filter.status as any;\n  return Device.find(q).sort({ createdAt: -1 });\n}\n\nexport async function updateDevice(\n  ownerId: string,\n  id: string,\n  patch: Partial<IDevice>\n) {\n  const device = await Device.findOneAndUpdate(\n    { _id: id, owner_id: ownerId },\n    patch,\n    { new: true }\n  );\n  if (!device)\n    throw Object.assign(new Error(\"Device not found\"), { status: 404 });\n  return device;\n}\n\nexport async function deleteDevice(ownerId: string, id: string) {\n  const res = await Device.findOneAndDelete({ _id: id, owner_id: ownerId });\n  if (!res) throw Object.assign(new Error(\"Device not found\"), { status: 404 });\n  return { success: true };\n}\n\nexport async function heartbeat(ownerId: string, id: string, status?: string) {\n  const update: any = { last_active_at: new Date() };\n  if (status) update.status = status;\n  const device = await Device.findOneAndUpdate(\n    { _id: id, owner_id: ownerId },\n    update,\n    { new: true }\n  );\n  if (!device)\n    throw Object.assign(new Error(\"Device not found\"), { status: 404 });\n  return device;\n}\n","import { Response } from \"express\";\nimport * as Dev from \"@services/device.service\";\nimport { AuthRequest } from \"@middleware/auth\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { Device } from \"@models/Device\";\n\nexport async function create(req: AuthRequest, res: Response) {\n  const device = await Dev.createDevice(req.user!.id, req.body);\n  return res.status(StatusCodes.CREATED).json({ success: true, device });\n}\n\nexport async function list(req: AuthRequest, res: Response) {\n  const devices = await Dev.listDevices(req.user!.id, {\n    type: req.query.type as string | undefined,\n    status: req.query.status as string | undefined,\n  });\n  return res.status(StatusCodes.OK).json({ success: true, devices });\n}\n\nexport async function update(req: AuthRequest, res: Response) {\n  const device = await Dev.updateDevice(req.user!.id, req.params.id, req.body);\n  return res.status(StatusCodes.OK).json({ success: true, device });\n}\n\nexport async function remove(req: AuthRequest, res: Response) {\n  await Dev.deleteDevice(req.user!.id, req.params.id);\n  return res\n    .status(StatusCodes.OK)\n    .json({ success: true, message: \"Device removed\" });\n}\n\nexport async function heartbeat(req: AuthRequest, res: Response) {\n  const device = await Dev.heartbeat(\n    req.user!.id,\n    req.params.id,\n    req.body.status\n  );\n  return res\n    .status(StatusCodes.OK)\n    .json({\n      success: true,\n      message: \"Device heartbeat recorded\",\n      last_active_at: device.last_active_at,\n    });\n}\n\nexport async function assertOwnership(userId: string, deviceId: string) {\n  const owned = await Device.findOne({\n    _id: deviceId,\n    owner_id: userId,\n  }).lean();\n  if (!owned)\n    throw Object.assign(new Error(\"Device not found\"), { status: 404 });\n}\n","import { Request, Response, NextFunction } from \"express\";\nimport { verifyJwt } from \"@config/jwt.ts\";\nimport { StatusCodes } from \"http-status-codes\";\n\nexport interface AuthRequest extends Request {\n  user?: { id: string; role: \"user\" | \"admin\" };\n}\n\nexport const auth = (req: AuthRequest, res: Response, next: NextFunction) => {\n  const header = req.headers.authorization;\n  if (!header?.startsWith(\"Bearer \")) {\n    return res\n      .status(StatusCodes.UNAUTHORIZED)\n      .json({ success: false, message: \"Missing token\" });\n  }\n  try {\n    const token = header.split(\" \")[1];\n    const payload = verifyJwt(token);\n    req.user = { id: payload.sub, role: payload.role };\n    next();\n  } catch (e) {\n    return res\n      .status(StatusCodes.UNAUTHORIZED)\n      .json({ success: false, message: \"Invalid/Expired token\" });\n  }\n};\n","import { z } from \"zod\";\n\nexport const createDeviceSchema = z.object({\n  body: z.object({\n    name: z.string().min(2),\n    type: z\n      .enum([\"light\", \"thermostat\", \"meter\", \"camera\", \"other\"])\n      .default(\"other\"),\n    status: z\n      .enum([\"active\", \"inactive\", \"faulty\"])\n      .optional()\n      .default(\"inactive\"),\n  }),\n});\n\nexport const listDevicesSchema = z.object({\n  query: z.object({\n    type: z\n      .enum([\"light\", \"thermostat\", \"meter\", \"camera\", \"other\"])\n      .optional(),\n    status: z.enum([\"active\", \"inactive\", \"faulty\"]).optional(),\n  }),\n});\n\nexport const updateDeviceSchema = z.object({\n  params: z.object({ id: z.string().length(24) }),\n  body: z\n    .object({\n      name: z.string().min(2).optional(),\n      type: z\n        .enum([\"light\", \"thermostat\", \"meter\", \"camera\", \"other\"])\n        .optional(),\n      status: z.enum([\"active\", \"inactive\", \"faulty\"]).optional(),\n    })\n    .refine((data) => Object.keys(data).length > 0, {\n      message: \"No fields to update\",\n    }),\n});\n\nexport const deviceIdParamSchema = z.object({\n  params: z.object({ id: z.string().length(24) }),\n});\n\nexport const heartbeatSchema = z.object({\n  params: z.object({ id: z.string().length(24) }),\n  body: z.object({\n    status: z.enum([\"active\", \"inactive\", \"faulty\"]).optional(),\n  }),\n});\n","import { Router } from \"express\";\nimport * as LogController from \"@controllers/log.controller.ts\";\nimport { validate } from \"@middleware/validate.ts\";\nimport { auth } from \"@middleware/auth.ts\";\nimport {\n  createLogSchema,\n  getLogsSchema,\n  usageSchema,\n} from \"../schemas/log.schema.ts\";\n\nconst router = Router();\n\nrouter.use(auth);\nrouter.post(\"/:id/logs\", validate(createLogSchema), LogController.create);\nrouter.get(\"/:id/logs\", validate(getLogsSchema), LogController.list);\nrouter.get(\"/:id/usage\", validate(usageSchema), LogController.usage);\n\nexport default router;\n","import { Schema, model, Document, Types } from \"mongoose\";\n\nexport interface ILog extends Document {\n  device_id: Types.ObjectId;\n  event: string; // e.g., 'units_consumed'\n  value?: number; // optional numeric value\n  timestamp: Date; // when event happened\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst logSchema = new Schema<ILog>(\n  {\n    device_id: {\n      type: Schema.Types.ObjectId,\n      ref: \"Device\",\n      required: true,\n      index: true,\n    },\n    event: { type: String, required: true },\n    value: { type: Number, required: false },\n    timestamp: { type: Date, default: () => new Date(), index: true },\n  },\n  { timestamps: true }\n);\n\nexport const Log = model<ILog>(\"Log\", logSchema);\n","import { Log } from \"@models/Log\";\nimport { Types } from \"mongoose\";\nimport dayjs from \"dayjs\";\n\nexport async function createLog(\n  ownerId: string,\n  deviceId: string,\n  payload: { event: string; value?: number; timestamp?: string }\n) {\n  // Ownership should be enforced at route/service level by verifying device owner, but for brevity assume checked in controller.\n  const time = payload.timestamp ? new Date(payload.timestamp) : new Date();\n  return Log.create({\n    device_id: new Types.ObjectId(deviceId),\n    event: payload.event,\n    value: payload.value,\n    timestamp: time,\n  });\n}\n\nexport async function getLogs(deviceId: string, limit: number) {\n  return Log.find({ device_id: deviceId }).sort({ timestamp: -1 }).limit(limit);\n}\n\nexport async function getUsage(deviceId: string, range: \"24h\" | \"7d\") {\n  const now = dayjs();\n  const from =\n    range === \"24h\" ? now.subtract(24, \"hour\") : now.subtract(7, \"day\");\n  const result = await Log.aggregate([\n    {\n      $match: {\n        device_id: new Types.ObjectId(deviceId),\n        event: \"units_consumed\",\n        timestamp: { $gte: from.toDate(), $lte: now.toDate() },\n      },\n    },\n    { $group: { _id: null, total: { $sum: { $ifNull: [\"$value\", 0] } } } },\n  ]);\n  const total = result[0]?.total || 0;\n  return total as number;\n}\n","import { Response } from \"express\";\nimport { AuthRequest } from \"@middleware/auth\";\nimport * as Logs from \"@services/log.service\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { assertOwnership } from \"@controllers/device.controller\";\n\nexport async function create(req: AuthRequest, res: Response) {\n  await assertOwnership(req.user!.id, req.params.id);\n  const log = await Logs.createLog(req.user!.id, req.params.id, req.body);\n  return res.status(StatusCodes.CREATED).json({ success: true, log });\n}\n\nexport async function list(req: AuthRequest, res: Response) {\n  await assertOwnership(req.user!.id, req.params.id);\n  const limit = Number(req.query.limit || 10);\n  const logs = await Logs.getLogs(req.params.id, limit);\n  return res.status(StatusCodes.OK).json({ success: true, logs });\n}\n\nexport async function usage(req: AuthRequest, res: Response) {\n  await assertOwnership(req.user!.id, req.params.id);\n  const range = (req.query.range as \"24h\" | \"7d\") || \"24h\";\n  const total = await Logs.getUsage(req.params.id, range);\n  return res\n    .status(StatusCodes.OK)\n    .json({\n      success: true,\n      device_id: req.params.id,\n      total_units_last_24h: range === \"24h\" ? total : undefined,\n      total_units_last_7d: range === \"7d\" ? total : undefined,\n    });\n}\n","import { z } from \"zod\";\n\nexport const createLogSchema = z.object({\n  params: z.object({ id: z.string().length(24) }),\n  body: z.object({\n    event: z.string().min(1),\n    value: z.number().optional(),\n    timestamp: z.string().datetime().optional(),\n  }),\n});\n\nexport const getLogsSchema = z.object({\n  params: z.object({ id: z.string().length(24) }),\n  query: z.object({\n    limit: z.coerce.number().int().positive().max(100).default(10),\n  }),\n});\n\nexport const usageSchema = z.object({\n  params: z.object({ id: z.string().length(24) }),\n  query: z.object({\n    range: z.enum([\"24h\", \"7d\"]).default(\"24h\"),\n  }),\n});\n","import { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\n\nexport function notFound(_req: Request, res: Response) {\n  return res\n    .status(StatusCodes.NOT_FOUND)\n    .json({ success: false, message: \"Route not found\" });\n}\n\nexport function errorHandler(\n  err: any,\n  _req: Request,\n  res: Response,\n  _next: NextFunction\n) {\n  const status = err.status || StatusCodes.INTERNAL_SERVER_ERROR;\n  const message = err.message || \"Internal server error\";\n  return res.status(status).json({ success: false, message });\n}\n","import cron from \"node-cron\";\nimport { Device } from \"@models/Device.ts\";\n\n// Runs every 30 minutes. Deactivates devices inactive for >24h.\nexport function startStaleDeviceJob() {\n  cron.schedule(\"*/30 * * * *\", async () => {\n    const now = new Date();\n    const dayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    await Device.updateMany(\n      { last_active_at: { $lte: dayAgo } },\n      { $set: { status: \"inactive\" } }\n    );\n  });\n}\n","import { env } from \"@config/env.ts\";\nimport { connectDB } from \"@config/db.ts\";\nimport app from \"./app.ts\";\nimport { startStaleDeviceJob } from \"@jobs/deactivateStaleDevices.ts\";\n\nasync function bootstrap() {\n  await connectDB();\n  startStaleDeviceJob();\n  app.listen(env.PORT, () => {\n    console.log(`API running on http://localhost:${env.PORT}`);\n  });\n}\n\nbootstrap().catch((e) => {\n  console.error(e);\n  process.exit(1);\n});\n"],"mappings":"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","names":["auth","signup","login","StatusCodes","signup","login","Router","Schema","model","Types","update","StatusCodes","StatusCodes","heartbeat","StatusCodes","z","router","Router","heartbeat","Router","Schema","model","Types","StatusCodes","create","StatusCodes","list","z","router","Router","create","list","StatusCodes"]}